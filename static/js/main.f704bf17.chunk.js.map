{"version":3,"sources":["assets/images/poll_hero.svg","assets/images/poll_creator.svg","assets/images/real_time.svg","assets/images/pie-chart.svg","Pages/Landing/index.ts","Pages/Landing/Landing.tsx","Constants.ts","services/Poll/postPoll.ts","Components/OptionsForm/OptionsForm.tsx","Components/PollForm/PollForm.tsx","Pages/CreatePoll/index.ts","Pages/CreatePoll/CreatePoll.tsx","services/Poll/getPoll.ts","Components/PollContent/PollContent.tsx","socket/addVote.ts","socket/index.ts","Pages/Poll/Poll.tsx","socket/getPoll.ts","Components/Nav/Nav.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Landing","className","to","src","Image","alt","API_URL","poll","a","axios","post","title","question","answers","res","data","OptionsForm","renderOptionFields","fields","add","remove","map","field","key","nanoid","style","display","justifyContent","alignItems","marginBottom","align","Item","name","fieldKey","rules","required","message","placeholder","pos","MinusCircleOutlined","marginLeft","onClick","showCancel","textAlign","type","PlusOutlined","marginTop","List","PollForm","onFinish","loader","autoComplete","loading","htmlType","CreatePoll","useState","submitLoader","setSubmitLoader","history","useHistory","sendPoll","values","questions","text","postPoll","push","_id","length","notification","error","id","get","PollContent","io","copyToClipboard","option","setOption","toUpperCase","slice","totalVotes","reduce","ans","votes","votesPercentage","htmlFor","onChange","toPrecision","width","renderOptions","CopyOutlined","console","log","undefined","localStorage","getItem","setItem","emit","JSON","stringify","success","addVote","socket","Poll","setPoll","useParams","useEffect","window","location","href","getPoll","then","getPollEvent","on","pollData","parse","catch","err","disconnect","textField","document","createElement","innerText","body","appendChild","select","execCommand","Nav","Logo","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f704bf17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/poll_hero.5268775a.svg\";","module.exports = __webpack_public_path__ + \"static/media/poll_creator.57a833b4.svg\";","module.exports = __webpack_public_path__ + \"static/media/real_time.c1b27570.svg\";","module.exports = __webpack_public_path__ + \"static/media/pie-chart.b98ba7d1.svg\";","import Landing from \"./Landing\";\nexport default Landing;","import React from 'react';\nimport {Button} from 'antd';\nimport { Link } from 'react-router-dom';\nimport Image from \"../../assets/images/poll_hero.svg\";\nconst Landing : React.FC<{}> = () => {\n    return (\n        <div className=\"landing\">\n            <div className=\"landing__header\">\n            <h2>Real Time Polling for any of your Question</h2>\n            <div className=\"landing__btn\">\n            <Link to=\"/create\"><Button>Create A New Poll Now</Button></Link>\n            </div>\n            </div>\n            <div className=\"landing__image\">\n                <img src={Image} alt=\"hero\"/>\n            </div>\n        </div>\n    );\n}\n\nexport default Landing;","export const API_URL = \"http://voteforbest.herokuapp.com/\";\nexport const SOCKET_URL = \"http://voteforbest.herokuapp.com/\";","import Poll from \"../../Models/Poll.model\";\nimport axios from 'axios';\nimport { API_URL } from \"../../Constants\";\n\nexport default async (poll:Poll) => {\n    const res = await axios.post(`${API_URL}poll`, {\n        title: poll.title,\n        question: poll.question,\n        answers: poll.answers,\n    })\n    return res.data.poll\n}","import React, { useState } from 'react';\nimport { Form, Input, Button, Space } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { nanoid } from 'nanoid';\nconst OptionsForm = () => {\n    \n    const showCancel = (pos: number, field: any, remove: (name: string) => void) => {\n        if (pos > 1) {\n            return (\n                <MinusCircleOutlined\n                    style={{ marginLeft: 8 }}\n                    onClick={() => {\n                        remove(field.name);\n                    }}\n                />\n            )\n        }\n    }\n    const renderOptionFields = (fields: any, { add, remove }: any) => {\n\n        return (\n            <div>\n                {fields.map((field: any, key: number) => (\n                    <Space key={nanoid()} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginBottom: 8 }} align=\"center\">\n                        <Form.Item\n\n                            name={[field.name, 'text']}\n                            fieldKey={[field.fieldKey, 'text']}\n                            rules={[{ required: true, message: `Enter Option ${key + 1}` }]}\n                        >\n\n                            <Input className=\"create-poll__option\" placeholder={`Option ${key + 1}`} />\n                        </Form.Item>\n                        {showCancel(key, field, remove)}\n\n                    </Space>\n\n                ))}\n\n                <Form.Item style={{ textAlign: 'left' }}>\n                    <Button\n                        type=\"dashed\"\n                        onClick={() => {\n                            add();\n                        }}\n                    >\n                        <PlusOutlined /> Add Option\n                    </Button>\n                </Form.Item>\n            </div>\n        );\n\n\n    }\n    return (\n        <div style={{ marginTop: '1rem' }}>\n            <Form.List name=\"questions\">\n                {renderOptionFields}\n            </Form.List>\n\n        </div>\n    );\n};\nexport default OptionsForm;","import * as React from 'react';\nimport { Form, Input, Button } from 'antd';\nimport OptionsForm from '../OptionsForm/OptionsForm';\n\ninterface Props {\n    onFinish: (values: any) => void,\n    loader: boolean\n}\n\nexport function PollForm({ onFinish, loader }: Props) {\n    return (\n        <Form className=\"create-poll__form\" onFinish={onFinish}>\n            <Form.Item name=\"title\"\n                rules={[{ required: true, message: `Enter Title` }]}\n            >\n                <Input className=\"create-poll__input\"\n\n                    placeholder=\"Title\" autoComplete=\"off\" />\n            </Form.Item>\n            <Form.Item\n                name=\"question\"\n                rules={[{ required: true, message: `Enter Question` }]}\n\n            >\n                <Input className=\"create-poll__input\" placeholder=\"Enter Question\" autoComplete=\"off\" />\n            </Form.Item>\n            <OptionsForm />\n            <Form.Item style={{ textAlign: 'right' }}>\n                <Button className=\"create-poll__btn\" loading={loader}  htmlType=\"submit\">\n                    Submit\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n}\n","import CreatePoll from \"./CreatePoll\";\nexport default CreatePoll;","import React, { useState } from 'react';\nimport { notification } from 'antd';\nimport { useHistory } from 'react-router-dom';\nimport PollModel from \"../../Models/Poll.model\";\nimport postPoll from '../../services/Poll/postPoll';\nimport { PollForm } from '../../Components/PollForm/PollForm';\nimport Image from \"../../assets/images/poll_creator.svg\";\nexport interface Props {\n}\n\ninterface Question {\n    text: string\n}\nconst CreatePoll: React.FC<Props> = () => {\n    const [submitLoader, setSubmitLoader] = useState<boolean>(false);\n    const history = useHistory();\n\n    const sendPoll = async (values: any) => {\n        setSubmitLoader(true);\n        const data: PollModel = {\n            title: values.title,\n            question: values.question,\n            answers: values.questions.map(({ text }: Question) => text),\n        }\n        try {\n            const poll = await postPoll(data);\n            setSubmitLoader(false);\n            history.push(`/poll/${poll._id}`)\n        } catch (err) {\n            setSubmitLoader(false);\n        };\n    }\n\n\n    const onFinish = (values: any) => {\n        if (!values.questions || values.questions.length < 2) {\n            notification.error({ message: \"Please add at least 2 options\" })\n            return;\n        }\n        sendPoll(values);\n    };\n\n\n    return (\n        <div className=\"create-poll\">\n            <PollForm onFinish={onFinish} loader={submitLoader} />\n            <div className=\"create-poll__image\">\n            <img src={Image} alt=\"creator\" />\n            </div>\n        </div>\n    )\n}\nexport default CreatePoll;\n","import Poll from \"../../Models/Poll.model\";\nimport axios from 'axios';\nimport { API_URL } from \"../../Constants\";\n\nexport default async (id:string) => {\n    const res = await axios.get(`${API_URL}get-poll/${id}`)\n    const data : Poll = res.data\n    return data\n}","import React, { useContext, useState } from 'react';\nimport PollModel from \"../../Models/Poll.model\";\nimport { Button, notification } from 'antd';\nimport {CopyOutlined} from \"@ant-design/icons\";\nimport addVote from '../../socket/addVote';\nimport { nanoid } from 'nanoid';\n\ninterface Props {\n    poll: PollModel\n    io: any\n    copyToClipboard: ()=>void\n}\n\nconst PollContent = ({ poll, io,copyToClipboard }: Props) => {\n    const { question, title, answers, _id } = poll;\n    const [option, setOption] = useState<number | undefined>()\n    \n    const renderOptions = () => {\n        // console.log(answers)\n        const totalVotes = answers.reduce((ans, { votes }) => {\n            //console.log(votes)\n            return ans + votes;\n        }, 0)\n        return answers.map(({ text, votes }, key) => {\n            const votesPercentage = (votes / (totalVotes ? totalVotes : 1)) * 100;\n            return (\n                <label key={key} htmlFor={`${key}`} className=\"poll__options\">\n                    <div className=\"poll__options__content\"><input id={`${key}`} name=\"option\" onChange={() => setOption(key)} type=\"radio\" /></div>\n                    <div className={\"poll__options__text poll__options__content\"}>{text}</div>\n                    <div className=\"poll__options__content\">{votesPercentage.toPrecision(4)}%</div>\n                    <div className=\"poll__options__votes\" style={{width:`${votesPercentage}%`}}></div>\n                </label>\n            )\n        })\n    }\n\n    const handleAddVote = () => {\n        console.log(_id && option)\n        if (_id !== undefined && option !== undefined) {\n            addVote(io, _id, option)\n        }else{\n            notification.error({message:\"Option Not Selected!\"})\n        }\n    }\n\n    return (\n        <div className=\"poll\">\n            <h3>{title[0].toUpperCase() + title.slice(1)}</h3>\n            <h2>Q) {question[0].toUpperCase() + question.slice(1)}</h2>\n            {renderOptions()}\n            <div className=\"poll__vote\">\n                <Button className=\"poll__btn--copy\" onClick={copyToClipboard} type=\"primary\"><CopyOutlined /></Button>\n                <Button className=\"poll__btn\" onClick={handleAddVote} type=\"primary\">Vote</Button>\n            </div>\n        </div>\n    )\n}\nexport default PollContent;","import { notification } from \"antd\";\n\nexport default (io:any,id:string,option:number) => {\n    if(!localStorage.getItem(id)){\n        localStorage.setItem(id,\"true\");\n        io.emit('add-vote',JSON.stringify({id,option}));\n        notification.success({message:\"Thanks for Your Vote!\"})\n        \n    }else{\n        notification.error({message:\"You have Already Voted\"})\n    }   \n}","import io from 'socket.io-client';\nimport { SOCKET_URL } from '../Constants';\n\nconst socket = io(SOCKET_URL);\n\nexport default socket;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, useRouteMatch } from 'react-router-dom';\nimport getPoll from '../../services/Poll/getPoll';\nimport getPollEvent from '../../socket/getPoll';\nimport PollModel from '../../Models/Poll.model';\nimport PollContent from '../../Components/PollContent/PollContent';\nimport io from \"../../socket\";\nimport Image from \"../../assets/images/real_time.svg\";\nimport { message, Empty } from 'antd';\nconst Poll = () => {\n    const [poll, setPoll] = useState<PollModel | undefined | null>()\n    const { id } = useParams();\n    //const route = useRouteMatch();\n    // let count = 0;\n    useEffect(() => {\n        console.log(window.location.href);\n        getPoll(id)\n            .then(data => {\n                setPoll(data);\n                getPollEvent(io, id);\n                io.on('refresh-data', (data: string) => {\n                    const pollData = JSON.parse(data);\n\n                    setPoll(pollData);\n                })\n            })\n            .catch(err => {\n                setPoll(null);\n            })\n        return () => {\n            io.disconnect()\n        }\n    }, [])\n    const copyToClipboard = () => {\n        const text = window.location.href;\n        console.log('text', text)\n        var textField = document.createElement('textarea')\n        textField.innerText = text\n        document.body.appendChild(textField)\n        textField.select()\n        document.execCommand('copy')\n        textField.remove()\n        message.success(\"Link Copied Successfully!\")\n    }\n    if (poll === undefined) {\n        return <p>\"...Loading\"</p>\n    }\n    if(poll === null){\n        return (\n        <div className=\"poll-page\">\n            <Empty/>\n        </div>\n        )\n    }\n    return (\n        <div className=\"poll-page\">\n            <PollContent poll={poll} io={io} copyToClipboard={copyToClipboard} />\n            <div className=\"poll-page__image\">\n                <img  src={Image} alt=\"real-time\" />\n            </div>\n        </div>\n    )\n}\n\nexport default Poll;","export default (io:any,id:string) => {\n    io.emit('get-poll',id);\n}","import React from 'react';\nimport Logo from \"../../assets/images/pie-chart.svg\";\nimport { Link } from 'react-router-dom';\n\nconst Nav = () => (\n    <div className=\"nav\">\n       <Link to=\"/\"> <img className=\"nav__logo\" src={Logo} alt=\"logo\" /></Link>\n    </div>\n)\n\nexport default Nav","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport Landing from './Pages/Landing';\nimport CreatePoll from './Pages/CreatePoll';\nimport Poll from './Pages/Poll/Poll';\nimport Nav from './Components/Nav/Nav';\n// using CommonJS modules\n// export const Context = React.createContext(io);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Nav/>\n\n        <Route path=\"/\" exact component={Landing} />\n        <Route path=\"/create\" exact component={CreatePoll} />\n        {/* <Context.Provider value={io}> */}\n\n          <Route path=\"/poll/:id\" exact component={Poll} />\n        {/* </Context.Provider> */}\n      </BrowserRouter>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./styles/index.scss\";\nimport 'antd/dist/antd.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}